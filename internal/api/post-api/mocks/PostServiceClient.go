// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pbapi "gitlab.com/pet-pr-social-network/post-service/ppbapi"
)

// PostServiceClient is an autogenerated mock type for the PostServiceClient type
type PostServiceClient struct {
	mock.Mock
}

// AddHashtagToPost provides a mock function with given fields: ctx, in, opts
func (_m *PostServiceClient) AddHashtagToPost(ctx context.Context, in *pbapi.AddHashtagToPostRequest, opts ...grpc.CallOption) (*pbapi.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.AddHashtagToPostRequest, ...grpc.CallOption) (*pbapi.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.AddHashtagToPostRequest, ...grpc.CallOption) *pbapi.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.AddHashtagToPostRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHashtag provides a mock function with given fields: ctx, in, opts
func (_m *PostServiceClient) CreateHashtag(ctx context.Context, in *pbapi.CreateHashtagRequest, opts ...grpc.CallOption) (*pbapi.CreateHashtagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.CreateHashtagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.CreateHashtagRequest, ...grpc.CallOption) (*pbapi.CreateHashtagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.CreateHashtagRequest, ...grpc.CallOption) *pbapi.CreateHashtagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.CreateHashtagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.CreateHashtagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePost provides a mock function with given fields: ctx, in, opts
func (_m *PostServiceClient) CreatePost(ctx context.Context, in *pbapi.CreatePostRequest, opts ...grpc.CallOption) (*pbapi.CreatePostResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.CreatePostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.CreatePostRequest, ...grpc.CallOption) (*pbapi.CreatePostResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.CreatePostRequest, ...grpc.CallOption) *pbapi.CreatePostResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.CreatePostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.CreatePostRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHashtag provides a mock function with given fields: ctx, in, opts
func (_m *PostServiceClient) GetHashtag(ctx context.Context, in *pbapi.GetHashtagRequest, opts ...grpc.CallOption) (*pbapi.GetHashtagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.GetHashtagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.GetHashtagRequest, ...grpc.CallOption) (*pbapi.GetHashtagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.GetHashtagRequest, ...grpc.CallOption) *pbapi.GetHashtagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.GetHashtagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.GetHashtagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPost provides a mock function with given fields: ctx, in, opts
func (_m *PostServiceClient) GetPost(ctx context.Context, in *pbapi.GetPostRequest, opts ...grpc.CallOption) (*pbapi.GetPostResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.GetPostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.GetPostRequest, ...grpc.CallOption) (*pbapi.GetPostResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.GetPostRequest, ...grpc.CallOption) *pbapi.GetPostResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.GetPostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.GetPostRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostsByHashtag provides a mock function with given fields: ctx, in, opts
func (_m *PostServiceClient) GetPostsByHashtag(ctx context.Context, in *pbapi.GetPostsByHashtagRequest, opts ...grpc.CallOption) (*pbapi.GetPostsByHashtagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.GetPostsByHashtagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.GetPostsByHashtagRequest, ...grpc.CallOption) (*pbapi.GetPostsByHashtagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.GetPostsByHashtagRequest, ...grpc.CallOption) *pbapi.GetPostsByHashtagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.GetPostsByHashtagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.GetPostsByHashtagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPostServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostServiceClient creates a new instance of PostServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostServiceClient(t mockConstructorTestingTNewPostServiceClient) *PostServiceClient {
	mock := &PostServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
