// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pbapi "gitlab.com/pet-pr-social-network/user-service/pbapi"
)

// UserServiceClient is an autogenerated mock type for the UserServiceClient type
type UserServiceClient struct {
	mock.Mock
}

// CreateCity provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) CreateCity(ctx context.Context, in *pbapi.CreateCityRequest, opts ...grpc.CallOption) (*pbapi.CreateCityResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.CreateCityResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.CreateCityRequest, ...grpc.CallOption) *pbapi.CreateCityResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.CreateCityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.CreateCityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInterest provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) CreateInterest(ctx context.Context, in *pbapi.CreateInterestRequest, opts ...grpc.CallOption) (*pbapi.CreateInterestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.CreateInterestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.CreateInterestRequest, ...grpc.CallOption) *pbapi.CreateInterestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.CreateInterestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.CreateInterestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) CreateUser(ctx context.Context, in *pbapi.CreateUserRequest, opts ...grpc.CallOption) (*pbapi.CreateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.CreateUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.CreateUserRequest, ...grpc.CallOption) *pbapi.CreateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.CreateUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.CreateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCities provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetAllCities(ctx context.Context, in *pbapi.Empty, opts ...grpc.CallOption) (*pbapi.GetAllCitiesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.GetAllCitiesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.Empty, ...grpc.CallOption) *pbapi.GetAllCitiesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.GetAllCitiesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllInterests provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetAllInterests(ctx context.Context, in *pbapi.Empty, opts ...grpc.CallOption) (*pbapi.GetAllInterestsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.GetAllInterestsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.Empty, ...grpc.CallOption) *pbapi.GetAllInterestsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.GetAllInterestsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCity provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetCity(ctx context.Context, in *pbapi.GetCityRequest, opts ...grpc.CallOption) (*pbapi.GetCityResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.GetCityResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.GetCityRequest, ...grpc.CallOption) *pbapi.GetCityResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.GetCityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.GetCityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInterest provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetInterest(ctx context.Context, in *pbapi.GetInterestRequest, opts ...grpc.CallOption) (*pbapi.GetInterestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.GetInterestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.GetInterestRequest, ...grpc.CallOption) *pbapi.GetInterestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.GetInterestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.GetInterestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetUser(ctx context.Context, in *pbapi.GetUserRequest, opts ...grpc.CallOption) (*pbapi.GetUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pbapi.GetUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pbapi.GetUserRequest, ...grpc.CallOption) *pbapi.GetUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbapi.GetUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbapi.GetUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserServiceClient creates a new instance of UserServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserServiceClient(t mockConstructorTestingTNewUserServiceClient) *UserServiceClient {
	mock := &UserServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
