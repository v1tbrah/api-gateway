networks:
  default-network:
    driver: bridge

version: '3.8'

services:

  proxy:
    image: nginx:latest
    volumes:
      - type: bind
        source: ./conf/nginx/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports:
      - "80:80"
    depends_on:
      - api-gateway
    networks:
      - default-network

  api-gateway:
    build:
      dockerfile: Dockerfile
    depends_on:
      - user-service
      - post-service
      - relation-service
    environment:
      - HTTP_HOST=0.0.0.0
      - HTTP_PORT=80
      - LOG_LVL=info
      - USER_SERVICE_CLIENT_HOST=user-service
      - USER_SERVICE_CLIENT_PORT=6060
      - POST_SERVICE_CLIENT_HOST=post-service
      - POST_SERVICE_CLIENT_PORT=5050
      - RELATION_SERVICE_CLIENT_HOST=relation-service
      - RELATION_SERVICE_CLIENT_PORT=4040
    networks:
      - default-network

  user-service:
    image: v1tbrah/user-service:v1-release
    container_name: user-service
    depends_on:
      user-service-storage:
        condition: service_healthy
    environment:
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=6060
      - LOG_LVL=info
      - STORAGE_HOST=user-service-storage
      - STORAGE_PORT=5432
      - STORAGE_USER=postgres
      - STORAGE_PASSWORD=postgres
      - USER_DB_NAME=postgres
      - USER_TABLE_NAME=users
      - CITY_TABLE_NAME=city
      - INTEREST_TABLE_NAME=interest
      - USER_PER_INTEREST_TABLE_NAME=user_per_interest
    expose:
      - "6060"
    networks:
      - default-network

  user-service-storage:
    image: postgres:latest
    container_name: user-service-storage
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 2s
      timeout: 1s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./docker-volumes/storage-data/user-service:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - default-network

  post-service:
    image: v1tbrah/post-service:v1-release
    container_name: post-service
    depends_on:
      post-service-storage:
        condition: service_healthy
    environment:
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=5050
      - LOG_LVL=info
      - STORAGE_HOST=post-service-storage
      - STORAGE_PORT=5432
      - STORAGE_USER=postgres
      - STORAGE_PASSWORD=postgres
      - POST_DB_NAME=postgres
      - POST_TABLE_NAME=post
      - HASHTAG_TABLE_NAME=hashtag
      - HASHTAG_PER_POST_TABLE_NAME=hashtag_per_post
    expose:
      - "5050"
    networks:
      - default-network

  post-service-storage:
    image: postgres:latest
    container_name: post-service-storage
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 2s
      timeout: 1s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./docker-volumes/storage-data/post-service:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - default-network

  relation-service:
    image: v1tbrah/relation-service:v1-release
    container_name: relation-service
    depends_on:
      relation-service-storage:
        condition: service_healthy
    environment:
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=4040
      - LOG_LVL=info
      - STORAGE_HOST=relation-service-storage
      - STORAGE_PORT=7687
      - STORAGE_USER=neo4j
      - STORAGE_PASSWORD=password
      - STORAGE_DB_NAME=neo4j
    expose:
      - "4040"
    ports:
      - "4040:4040"
    networks:
      - default-network

  relation-service-storage:
    image: neo4j:latest
    container_name: relation-service-storage
    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s
    environment:
      - NEO4J_AUTH=neo4j/password
    expose:
      - "7687"
      - "7474"
    networks:
      - default-network