version: '3.8'

networks:
  default-network:
    driver: bridge

volumes:
  user-storage-data: {}
  post-storage-data: {}
  feed-cache-data: {}

services:

  proxy:
    image: nginx:latest
    volumes:
      - type: bind
        source: ./conf/nginx/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports:
      - "80:80"
    depends_on:
      - api-gateway
    networks:
      - default-network

  api-gateway:
    build:
      dockerfile: Dockerfile
    depends_on:
      - user-service
      - post-service
      - relation-service
      - feed-service
      - media-service
    environment:
      - HTTP_HOST=0.0.0.0
      - HTTP_PORT=80
      - LOG_LVL=info
      - USER_SERVICE_CLIENT_HOST=user-service
      - USER_SERVICE_CLIENT_PORT=6060
      - POST_SERVICE_CLIENT_HOST=post-service
      - POST_SERVICE_CLIENT_PORT=5050
      - RELATION_SERVICE_CLIENT_HOST=relation-service
      - RELATION_SERVICE_CLIENT_PORT=4040
      - FEED_SERVICE_CLIENT_HOST=feed-service
      - FEED_SERVICE_CLIENT_PORT=3030
      - MEDIA_SERVICE_CLIENT_HOST=media-service
      - MEDIA_SERVICE_CLIENT_PORT=2020
    networks:
      - default-network

  user-service:
    image: v1tbrah/user-service:v1-release
    container_name: user-service
    depends_on:
      user-service-storage-migrate:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
    environment:
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=6060
      - LOG_LVL=info
      - STORAGE_HOST=user-service-storage
      - STORAGE_PORT=5432
      - STORAGE_USER=postgres
      - STORAGE_PASSWORD=password
      - USER_DB_NAME=users
    networks:
      - default-network

  user-service-storage:
    image: postgres:alpine
    container_name: user-service-storage
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 2s
      timeout: 1s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - ./dependencies/user-service/init.sql:/docker-entrypoint-initdb.d/init.sql
      - user-storage-data:/var/lib/postgresql/data
    networks:
      - default-network

  user-service-storage-migrate:
    image: migrate/migrate:v4.15.2 # Image page: <https://hub.docker.com/r/migrate/migrate>
    container_name: user-service-storage-migrate
    volumes: [ .:/src:ro ]
    working_dir: /src
    entrypoint: migrate -database "postgres://postgres:password@user-service-storage:5432/users?sslmode=disable" -source file://./dependencies/user-service/migrations -verbose up
    depends_on:
      user-service-storage:
        condition: service_healthy
    networks:
      - default-network

  post-service:
    image: v1tbrah/post-service:v1-release
    container_name: post-service
    depends_on:
      post-service-storage-migrate:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
    environment:
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=5050
      - LOG_LVL=info
      - STORAGE_HOST=post-service-storage
      - STORAGE_PORT=5432
      - STORAGE_USER=postgres
      - STORAGE_PASSWORD=password
      - POST_DB_NAME=posts
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092
    networks:
      - default-network

  post-service-storage:
    image: postgres:alpine
    container_name: post-service-storage
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 2s
      timeout: 1s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - ./dependencies/post-service/init.sql:/docker-entrypoint-initdb.d/init.sql
      - post-storage-data:/var/lib/postgresql/data
    networks:
      - default-network

  post-service-storage-migrate:
    image: migrate/migrate:v4.15.2 # Image page: <https://hub.docker.com/r/migrate/migrate>
    container_name: post-service-storage-migrate
    volumes: [ .:/src:ro ]
    working_dir: /src
    entrypoint: migrate -database "postgres://postgres:password@post-service-storage:5432/posts?sslmode=disable" -source file://./dependencies/post-service/migrations -verbose up
    depends_on:
      post-service-storage:
        condition: service_healthy
    networks:
      - default-network

  relation-service:
    image: v1tbrah/relation-service:v1-release
    container_name: relation-service
    depends_on:
      relation-service-storage:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=4040
      - LOG_LVL=info
      - STORAGE_HOST=relation-service-storage
      - STORAGE_PORT=7687
      - STORAGE_USER=neo4j
      - STORAGE_PASSWORD=password
      - STORAGE_DB_NAME=neo4j
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092
    networks:
      - default-network

  relation-service-storage:
    image: neo4j:latest
    container_name: relation-service-storage
    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s
    environment:
      - NEO4J_AUTH=neo4j/password
    networks:
      - default-network

  feed-service:
    image: v1tbrah/feed-service:v1-release
    container_name: feed-service
    depends_on:
      feed-service-cache:
        condition: service_healthy
      relation-service:
        condition: service_started
      post-service:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=3030
      - LOG_LVL=info
      - CACHE_HOST=feed-service-cache
      - CACHE_PORT=6379
      - FEED_DB_IDX=7
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092
      - RELATION_SERVICE_CLIENT_HOST=relation-service
      - RELATION_SERVICE_CLIENT_PORT=4040
      - POST_SERVICE_CLIENT_HOST=post-service
      - POST_SERVICE_CLIENT_PORT=5050
    networks:
      - default-network

  feed-service-cache:
    image: redis:7.0-alpine # Image page: <https://hub.docker.com/_/redis>
    container_name: feed-service-cache
    volumes:
      - feed-cache-data:/data:rw
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 500ms
      timeout: 1s
      retries: 10
    networks:
      - default-network

  media-service:
    image: v1tbrah/media-service:v1-release
    container_name: media-service
    depends_on:
      media-service-minio:
        condition: service_healthy
    environment:
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=2020
      - LOG_LVL=info
      - MINIO_HOST=media-service-minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_POST_BUCKET_NAME=post
    ports:
      - "2020:2020"
    networks:
      - default-network

  media-service-minio:
    container_name: media-service-minio
    image: quay.io/minio/minio:RELEASE.2022-02-18T01-50-10Z
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -I http://localhost:9000/minio/health/live' ]
      interval: 5s
      timeout: 5s
      start_period: 5s
    volumes:
      - ./dependencies/minio-service/minio-data:/data
    environment:
      MINIO_ROOT_USER: 'minio_user'
      MINIO_ROOT_PASSWORD: 'minio_password'
      MINIO_ADDRESS: ':9000'
      MINIO_CONSOLE_ADDRESS: ':9001'
    command: minio server /data
    networks:
      - default-network

  zookeeper:
    hostname: zookeeper
    image: wurstmeister/zookeeper:3.4.6
    networks:
      - default-network

  kafka:
    image: wurstmeister/kafka
    env_file:
      - conf/kafka/.env
    depends_on:
      - zookeeper
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 5s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - default-network